package org.sonso.hackautumn2025.websocket

import org.slf4j.LoggerFactory
import org.sonso.hackautumn2025.dto.*
import org.sonso.hackautumn2025.service.RoomSessionService
import org.springframework.context.event.EventListener
import org.springframework.messaging.handler.annotation.MessageMapping
import org.springframework.messaging.handler.annotation.Payload
import org.springframework.messaging.simp.SimpMessageHeaderAccessor
import org.springframework.messaging.simp.SimpMessagingTemplate
import org.springframework.messaging.simp.stomp.StompHeaderAccessor
import org.springframework.stereotype.Controller
import org.springframework.web.socket.messaging.SessionDisconnectEvent

@Controller
class CallSocketHandler(
    private val messagingTemplate: SimpMessagingTemplate,
    private val roomSessionService: RoomSessionService,
) {

    private val logger = LoggerFactory.getLogger(CallSocketHandler::class.java)

    @MessageMapping("/join-room")
    fun joinRoom(
        @Payload message: JoinRoomMessage,
        headerAccessor: SimpMessageHeaderAccessor
    ) {
        val sessionId = headerAccessor.sessionId ?: return
        val roomId = message.roomId

        logger.info("Session $sessionId attempting to join room $roomId")

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        roomSessionService.joinRoom(roomId, sessionId)

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        val participants = roomSessionService.getParticipants(roomId)

        logger.info("üë• Current participants in room $roomId: $participants")

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        messagingTemplate.convertAndSend(
            "/topic/room/$roomId/participants",
            ParticipantsMessage(participants)
        )

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ù–ï —Å–µ–±—è) –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º broadcast –≤ topic –≤–º–µ—Å—Ç–æ convertAndSendToUser
        participants
            .filter { it != sessionId }
            .forEach { participantId ->
                logger.info("Notifying $participantId about new user $sessionId")

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ topic, –Ω–æ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ destination
                messagingTemplate.convertAndSend(
                    "/topic/room/$roomId/user-joined-$participantId",
                    UserJoinedMessage(sessionId)
                )
            }

        logger.info("$sessionId connected to room $roomId with ${participants.size} total participants")
    }

    @MessageMapping("/offer")
    fun handleOffer(
        @Payload message: OfferMessage,
        headerAccessor: SimpMessageHeaderAccessor
    ) {
        val sessionId = headerAccessor.sessionId ?: return

        logger.info("Offer from $sessionId to ${message.target}")

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º broadcast —á–µ—Ä–µ–∑ topic —Å target –≤ –ø—É—Ç–∏
        messagingTemplate.convertAndSend(
            "/topic/room/offer/${message.target}",
            OfferFromMessage(message.offer, sessionId)
        )
    }

    @MessageMapping("/answer")
    fun handleAnswer(
        @Payload message: AnswerMessage,
        headerAccessor: SimpMessageHeaderAccessor
    ) {
        val sessionId = headerAccessor.sessionId ?: return

        logger.info("Answer from $sessionId to ${message.target}")

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º broadcast —á–µ—Ä–µ–∑ topic
        messagingTemplate.convertAndSend(
            "/topic/room/answer/${message.target}",
            AnswerFromMessage(message.answer, sessionId)
        )
    }

    @MessageMapping("/ice-candidate")
    fun handleIceCandidate(
        @Payload message: IceCandidateMessage,
        headerAccessor: SimpMessageHeaderAccessor
    ) {
        val sessionId = headerAccessor.sessionId ?: return

        logger.info("ICE candidate from $sessionId to ${message.target}")

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º broadcast —á–µ—Ä–µ–∑ topic
        messagingTemplate.convertAndSend(
            "/topic/room/ice-candidate/${message.target}",
            IceCandidateFromMessage(message.candidate, sessionId)
        )
    }

    @EventListener
    fun handleDisconnect(event: SessionDisconnectEvent) {
        val sessionId = StompHeaderAccessor.wrap(event.message).sessionId ?: return

        logger.info("Session $sessionId disconnecting")

        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        val roomId = roomSessionService.leaveRoom(sessionId) ?: return

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        messagingTemplate.convertAndSend(
            "/topic/room/$roomId/user-left",
            UserLeftMessage(sessionId)
        )

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        val participants = roomSessionService.getParticipants(roomId)
        messagingTemplate.convertAndSend(
            "/topic/room/$roomId/participants",
            ParticipantsMessage(participants)
        )

        logger.info("$sessionId disconnected from room $roomId. Remaining: ${participants.size}")
    }
}
